(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{509:function(t,s,e){"use strict";e.r(s);var a=e(10),v=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("“从输入 URL 到页面展示，中间发生了什么”，这个问题，最近在各种文章中经常看到，更是出现在好些公司的面试题库里，俨然成了一道网红题。")]),t._v(" "),e("p",[t._v("虽说是网红题，这道题背后考察的知识点，却是对一个前端实打实的考验，这道题其实涉及了网络、操作系统、浏览器进程等一系列知识点，需要好好说道说道。")]),t._v(" "),e("p",[t._v("这道题所描述的流程，先用一张图来表示下：")]),t._v(" "),e("p",[t._v("![browser][../.vuepress/public/images/browser.png]")]),t._v(" "),e("p",[t._v("从图中可以看出，整个过程需要各个进程之间的配合。首先来了解下图中，各个进程负责什么")]),t._v(" "),e("ul",[e("li",[t._v("浏览器进程主要负责用户交互、子进程管理和文件储存等功能")]),t._v(" "),e("li",[t._v("网络进程是面向渲染进程和浏览器进程等提供网络下载功能")]),t._v(" "),e("li",[t._v("渲染进程的主要职责是把从网络下载的 HTML、JavaScript、CSS、图片等资源解析为可以显示和交互的页面。")])]),t._v(" "),e("p",[t._v("而图中的流程，用文字来描述下就是：")]),t._v(" "),e("ol",[e("li",[t._v("首先，浏览器进程接收到用户输入的 URL 请求，浏览器进程便将该 URL 转发给网络进程。")]),t._v(" "),e("li",[t._v("然后，在网络进程中发起真正的 URL 请求。")]),t._v(" "),e("li",[t._v("接着网络进程接收到了响应头数据，便解析响应头数据，并将数据转发给浏览器进程。")]),t._v(" "),e("li",[t._v("浏览器进程接收到网络进程的响应头数据之后，发送“提交导航 (CommitNavigation)”消息到渲染进程；")]),t._v(" "),e("li",[t._v("渲染进程接收到“提交导航”的消息之后，便开始准备接收 HTML 数据，接收数据的方式是直接和网络进程建立数据管道；")]),t._v(" "),e("li",[t._v("最后渲染进程会向浏览器进程“确认提交”，这是告诉浏览器进程：“已经准备好接受和解析页面数据了”。")]),t._v(" "),e("li",[t._v("浏览器进程接收到渲染进程“提交文档”的消息之后，便开始移除之前旧的文档，然后更新浏览器进程中的页面状态。")])]),t._v(" "),e("p",[t._v("在这其中，"),e("strong",[t._v("用户发出 URL 到页面开始解析的过程，叫做导航。")])]),t._v(" "),e("p",[t._v("现在依次来看些阶段")]),t._v(" "),e("h2",{attrs:{id:"url-请求过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#url-请求过程"}},[t._v("#")]),t._v(" URL 请求过程")]),t._v(" "),e("p",[t._v("当用户在浏览器地址栏中输入一个 URL 时，点击回车时，就意味着当前页面即将被替换成新的页面。接下来，便进入了页面资源请求过程。这时，浏览器进程会通过进程间通信（IPC）把 URL 请求发送至网络进程，网络进程接收到 URL 请求后，会在这里发起真正的 URL 请求流程。")]),t._v(" "),e("p",[t._v("网络进程会查找本地缓存是否缓存了该资源。如果有缓存资源，那么直接返回资源给浏览器进程；如果在缓存中没有查找到资源，那么直接进入网络请求流程。这请求前的第一步是要进行 DNS 解析，以获取请求域名的服务器 IP 地址。如果请求协议是 HTTPS，那么还需要建立 TLS 连接。")]),t._v(" "),e("p",[t._v("接下来就是利用 IP 地址和服务器建立 TCP 连接。连接建立之后，浏览器端会构建请求行、请求头等信息，并把和该域名相关的 Cookie 等数据附加到请求头中，然后向服务器发送构建的请求信息。")]),t._v(" "),e("p",[t._v("服务器接收到请求信息后，会根据请求信息生成响应数据（包括响应行、响应头和响应体等信息），并发给网络进程。等网络进程接收了响应行和响应头之后，就开始解析响应头的内容了。")]),t._v(" "),e("p",[t._v("响应的情况里，可能存在重定向的情况，比如 HTTP 状态码为 301 或 302。如果发现返回的状态码是 301 或者 302，那么说明服务器需要浏览器重定向到其他 URL。这时网络进程会从响应头的 Location 字段里面读取重定向的地址，然后再发起新的 HTTP 或者 HTTPS 请求，一切又重头开始了。")]),t._v(" "),e("p",[t._v("所以说，在导航过程中，如果服务器响应行的状态码包含了 301、302 一类的跳转信息，浏览器会跳转到新的地址继续导航；如果响应行是 200，那么表示浏览器可以继续处理该请求。")]),t._v(" "),e("p",[t._v("在处理了跳转信息之后，浏览器便开始处理 URL 请求的数据类型，有时候是一个下载类型，有时候是正常的 HTML 页面，那么浏览器是如何区分它们呢？")]),t._v(" "),e("p",[t._v("答案是 Content-Type。Content-Type 是 HTTP 头中一个非常重要的字段， 它告诉浏览器服务器返回的响应体数据是什么类型，然后浏览器会根据 Content-Type 的值来决定如何显示响应体的内容。如果是 HTML 页面，那么就是"),e("code",[t._v("Content-Type: text/html")]),t._v("。如果是下载类型，那么就是"),e("code",[t._v("Content-Type: octet-stream")]),t._v("。")]),t._v(" "),e("p",[t._v("需要注意的是，如果服务器配置 Content-Type 不正确，比如将 text/html 类型配置成 application/octet-stream 类型，那么浏览器可能会曲解文件内容，比如会将一个本来是用来展示的页面，变成了一个下载文件。")]),t._v(" "),e("p",[t._v("所以，不同 Content-Type 的后续处理流程也截然不同。如果 Content-Type 字段的值被浏览器判断为下载类型，那么该请求会被提交给浏览器的下载管理器，同时该 URL 请求的导航流程就此结束。但如果是 HTML，那么浏览器则会继续进行导航流程。由于 Chrome 的页面渲染是运行在渲染进程中的，所以接下来就需要准备渲染进程了。")]),t._v(" "),e("h2",{attrs:{id:"渲染进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染进程"}},[t._v("#")]),t._v(" 渲染进程")]),t._v(" "),e("p",[t._v("默认情况下，Chrome 会为每个页面分配一个渲染进程，也就是说，每打开一个新页面就会配套创建一个新的渲染进程。但是，也有一些例外，在某些情况下，浏览器会让多个页面直接运行在同一个渲染进程中。")]),t._v(" "),e("p",[t._v("那什么情况下多个页面会同时运行在一个渲染进程中呢？")]),t._v(" "),e("p",[t._v("要回答这个问题，我们就需要先了解下什么是同一站点（same-site）。具体地讲，我们将“同一站点”定义为根域名（例如，geekbang.org）加上协议（例如，https:// 或者 http://）相同，那么就是同一站点。比如")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("https://example.com")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("https://a.example.com")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token template-string"}},[e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("https://example.com:8080")]),e("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("以上 3 个都属于同一站点，因为根域名和协议是相同的。")]),t._v(" "),e("p",[t._v("Chrome 的默认策略是，每个标签对应一个渲染进程。但如果从一个页面打开了另一个新页面，而新页面和当前页面属于同一站点的话，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫 process-per-site-instance。而打开的新页面和之前所在页面不是同一站点，那么就会新开一个渲染进程。")]),t._v(" "),e("p",[t._v("渲染进程准备好之后，还不能立即进入文档解析状态，因为此时的文档数据还在网络进程中，并没有提交给渲染进程，所以下一步就进入了提交文档阶段。")]),t._v(" "),e("h2",{attrs:{id:"提交文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#提交文档"}},[t._v("#")]),t._v(" 提交文档")]),t._v(" "),e("p",[t._v("所谓提交文档，就是指浏览器进程将网络进程接收到的 HTML 数据提交给渲染进程，具体流程是这样的。")]),t._v(" "),e("p",[t._v("首先当浏览器进程接收到网络进程的响应头数据之后，便向渲染进程发起“提交文档”的消息；渲染进程接收到“提交文档”的消息后，会和网络进程建立传输数据的“管道”；等文档数据传输完成之后，渲染进程会返回“确认提交”的消息给浏览器进程；浏览器进程在收到“确认提交”的消息后，会更新浏览器界面状态，包括了安全状态、地址栏的 URL、前进后退的历史状态，并更新 Web 页面。")]),t._v(" "),e("p",[t._v("这也是为什么在浏览器的地址栏里面输入了一个地址后，之前的页面没有立马消失，而是要加载一会儿才会更新页面。")]),t._v(" "),e("p",[t._v("导航流程走完以后，就到渲染阶段了。")]),t._v(" "),e("h2",{attrs:{id:"渲染流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染流程"}},[t._v("#")]),t._v(" 渲染流程")]),t._v(" "),e("p",[t._v("渲染阶段的流程，主要有：")]),t._v(" "),e("ol",[e("li",[t._v("HTML 解析，DOM 结构解析成 DOM 树；")]),t._v(" "),e("li",[t._v("CSS 文件解析，CSS 文件解析成 CSSOM 树；")]),t._v(" "),e("li",[t._v("浏览器根据 DOM 树和 CSSOM 树绘制页面；")])]),t._v(" "),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),e("p",[t._v("从输入 URl 到完整页面展示，主要经历了，DNS 解析，HTTP 请求，HTTP 响应，HTML 文档解析，CSS 文件解析，js 文件解析，浏览器绘制具体页面等流程。")])])}),[],!1,null,null,null);s.default=v.exports}}]);