(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{534:function(t,n,a){"use strict";a.r(n);var s=a(10),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("React 生命周期，对于 React 开发者而言，可以说刻到了 DNA 都不为过。但就是这样一个老生长谈的话题，很多入门资料对于其介绍，大都是一个一个生命周期列出来，说一下怎么用，泛泛而过。这样的教学，导致很多入门者，对于 React 组件生命周期的印象就是，“背就完了，别想太多”。")]),t._v(" "),a("p",[t._v("“背就完了”，可能能让我们知道“What to do”，进而达到“How to do”，却不能帮助我们理解“Why to do”。")]),t._v(" "),a("p",[t._v("React15 和 React16 两个版本，组件的生命周期又进行了变动。我们应当从 React 的基本原理出发，对比这两个版本组件生命周期的异同，认真探寻 React 组件的生命周期设计哲学。通过搞清楚一个又一个的“Why”，帮助自己建立系统而完善的生命周期知识体系。")]),t._v(" "),a("h2",{attrs:{id:"react-设计的核心点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-设计的核心点"}},[t._v("#")]),t._v(" React 设计的核心点")]),t._v(" "),a("p",[t._v("如果我们常翻阅 React 官网或者 React 官方的一些文章，你会发现“组件”和“虚拟 DOM”这两个词的出镜率是非常高的，它们是 React 基本原理中极为关键的两个概念。")]),t._v(" "),a("h3",{attrs:{id:"虚拟-dom-核心算法的基石"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟-dom-核心算法的基石"}},[t._v("#")]),t._v(" 虚拟 DOM：核心算法的基石")]),t._v(" "),a("p",[t._v("组件在初始化时，会通过调用生命周期中的 render 方法，生成虚拟 DOM，然后再通过调用 ReactDOM.render 方法，实现虚拟 DOM 到真实 DOM 的转换。")]),t._v(" "),a("p",[t._v("当组件更新时，会再次通过调用 render 方法生成新的虚拟 DOM，然后借助 diff 算法定位出两次虚拟 DOM 的差异，从而针对发生变化的真实 DOM 作定向更新。")]),t._v(" "),a("p",[t._v("以上就是 React 框架核心算法的大致流程。对于这套关键的工作流来说，“虚拟 DOM”是所有操作的大前提，是核心算法的基石。")]),t._v(" "),a("h3",{attrs:{id:"组件化编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件化编程"}},[t._v("#")]),t._v(" 组件化编程")]),t._v(" "),a("p",[t._v("组件化是一种优秀的软件设计思想，也是 React 团队在研发效能方面所做的一个重要的努力。")]),t._v(" "),a("p",[t._v("在一个 React 项目中，几乎所有的可见/不可见的内容都可以被抽离为各种各样的组件，每个组件既是“封闭”的，也是“开放”的。")]),t._v(" "),a("p",[t._v("所谓“封闭”，主要是针对“渲染工作流”（指从组件数据改变到组件实际更新发生的过程）来说的。在组件自身的渲染工作流中，每个组件都只处理它内部的渲染逻辑。在没有数据流交互的情况下，组件与组件之间可以做到“各自为政”。")]),t._v(" "),a("p",[t._v("而所谓“开放”，则是针对组件间通信来说的。React 允许开发者基于“单向数据流”的原则完成组件间的通信。而组件之间的通信又将改变通信双方/某一方内部的数据，进而对渲染结果构成影响。所以说在数据这个“通讯员”的牵线搭桥之下，组件之间又是彼此开放的，是可以相互影响的。")]),t._v(" "),a("p",[t._v("这一“开放”与“封闭”兼具的特性，使得 React 组件既专注又灵活，具备高度的可重用性和可维护性。")]),t._v(" "),a("h2",{attrs:{id:"生命周期方法的本质-组件的-灵魂-与-躯干"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期方法的本质-组件的-灵魂-与-躯干"}},[t._v("#")]),t._v(" 生命周期方法的本质：组件的“灵魂”与“躯干”")]),t._v(" "),a("p",[t._v("曾有人将 React 组件的 render 方法比喻程 React 组件的灵魂，因为 render 描述了 React 组件是怎样的。前面说到的虚拟 DOM、组件化，全是在围绕着"),a("code",[t._v("render")]),t._v("在工作：虚拟 DOM 自然不必多说，需要 render 来生成；而组件化概念中所提及的“渲染工作流”，这里指的是从组件数据改变到组件实际更新发生的过程，这个过程的实现同样离不开 render。")]),t._v(" "),a("p",[t._v("从这个比喻出发，render 是组件的灵魂，那各生命周期方法就可以理解为组件的躯干了。")]),t._v(" "),a("p",[t._v("“躯干”未必总是会做具体的事情（比如说我们可以选择性地省略对 render 之外的任何生命周期方法内容的编写），而“灵魂”却总是充实的（render 函数却坚决不能省略）；倘若“躯干”做了点什么，往往都会直接或间接地影响到“灵魂”（因为即便是 render 之外的生命周期逻辑，也大部分是在为 render 层面的效果服务）；“躯干”和“灵魂”一起，共同构成了 React 组件完整而不可分割的“生命时间轴”。")]),t._v(" "),a("h2",{attrs:{id:"拆解生命周期-从-react15-聊聊"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拆解生命周期-从-react15-聊聊"}},[t._v("#")]),t._v(" 拆解生命周期，从 React15 聊聊")]),t._v(" "),a("p",[t._v("因为 React16 甚至 React17 的快步跑进，现在很多资料在讲解 React 生命周期时，直接从 16 开始。这样做虽然省事，但也模糊掉了 React15 和 React16 之间的不同，无法帮助我们理解这变动后的 why。")]),t._v(" "),a("p",[t._v("为了理解这两个版本生命周期变动的 why，我们先来看看 React15 之中，那些常用的生命周期，如下")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("App")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillReceiveProps")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldComponentUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillMount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidMount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillUnmount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("React15 中，组件的生命周期可分为三个阶段：挂载，更新，卸载。")]),t._v(" "),a("h2",{attrs:{id:"挂载阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#挂载阶段"}},[t._v("#")]),t._v(" 挂载阶段")]),t._v(" "),a("p",[t._v("在挂载阶段，一个 React 组件的生命周期会按照如下顺序调用：组件挂载（初始化渲染）=》constructor()=》componentWillMount() =》render() => componentDidMount()")]),t._v(" "),a("p",[t._v("首先我们来看 constructor 方法，该方法仅仅在挂载的时候被调用一次，我们可以在该方法中对 this.state 进行初始化：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"进入constructor"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// state 可以在 constructor 里初始化")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("state "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"子组件的文本"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("componentWillMount、componentDidMount 方法同样只会在挂载阶段被调用一次。其中 componentWillMount 会在执行 render 方法前被触发，有些开发者习惯在这个方法里做一些初始化的操作，但这些操作往往会伴随一些风险或者说不必要性。")]),t._v(" "),a("p",[t._v("接下来 render 方法被触发。注意 render 在执行过程中并不会去操作真实 DOM（也就是说不会渲染），它的职能是把需要渲染的内容返回出来。真实 DOM 的渲染工作，在挂载阶段是由 ReactDOM.render 来承接的。")]),t._v(" "),a("p",[t._v("componentDidMount 方法在渲染结束后被触发，此时因为真实 DOM 已经挂载到了页面上，我们可以在这个生命周期里执行真实 DOM 相关的操作。此外，类似于异步请求、数据初始化这样的操作也大可以放在这个生命周期来做（侧面印证了 componentWillMount 真的很鸡肋）。")]),t._v(" "),a("h2",{attrs:{id:"组件更新阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件更新阶段"}},[t._v("#")]),t._v(" 组件更新阶段")]),t._v(" "),a("p",[t._v("组件的更新分为两种：一种是由父组件触发的更新；另一种就是组件自身调用的 setState 触发的更新。")]),t._v(" "),a("p",[t._v("首先看组件自身 setState 触发的更新，会走哪些生命周期：shouldComponentUpdate() =》componentWiiUpdate() =》 render() =》componentDidUpdate()")]),t._v(" "),a("p",[t._v("而父组件触发的组件更新，会在最前面多走一个生命周期：componentWillReceiveProps(nextProps) =》shouldComponentUpdate() =》componentWiiUpdate() =》 render() =》componentDidUpdate()")]),t._v(" "),a("p",[t._v("在这个"),a("code",[t._v("componentWillReceiveProps(nextProps)")]),t._v("里，nextProps 表示的是接收到新 props 内容，而现有的 props （相对于 nextProps 的“旧 props”）我们可以通过 this.props 拿到，由此便能够感知到 props 的变化。")]),t._v(" "),a("p",[a("code",[t._v("componentWillReceiveProps(nextProps)")]),t._v("执行时机，还有一个误区--很多开发者以为，"),a("strong",[t._v("componentWillReceiveProps 是在组件的 props 内容发生了变化时被触发的。")]),t._v("。这种说法是不够严谨的，实际上，"),a("strong",[t._v("只要父组件更新了，子组件就算接收到 props 没有变化，自组件跟着更新的时候，也会走"),a("code",[t._v("componentWillReceiveProps(nextProps)")]),t._v("。")])]),t._v(" "),a("p",[t._v("而这个，在 React 官方文档中也有提及的")]),t._v(" "),a("blockquote",[a("p",[t._v("如果父组件导致组件重新渲染，即使 props 没有发生变化，也会调用此方法(componentReceiveProps)。如果只想处理更改，请确保进行当前值与变更值的比较。")])]),t._v(" "),a("p",[t._v("所以，严谨的说法应该是"),a("strong",[t._v("componentReceiveProps 并不是由 props 的变化触发的，而是由父组件的更新触发的。")])]),t._v(" "),a("p",[t._v("再来说"),a("code",[t._v("componentWillUpdate")]),t._v("和"),a("code",[t._v("componentDidUpdate")]),t._v("这对好哥们。")]),t._v(" "),a("p",[t._v("componentWillUpdate 会在 render 前被触发，它和 componentWillMount 类似，允许你在里面做一些不涉及真实 DOM 操作的准备工作；而 componentDidUpdate 则在组件更新完毕后被触发，和 componentDidMount 类似，这个生命周期也经常被用来处理 DOM 操作。此外，我们也常常将 componentDidUpdate 的执行作为子组件更新完毕的标志通知到父组件。")]),t._v(" "),a("p",[t._v("至于**"),a("code",[t._v("shouldComponentUpdate")]),t._v("**这个方法，对于 React 开发者更是亲切的老朋友了。因为它常常用来做 render 的性能优化。")]),t._v(" "),a("p",[t._v("render 方法由于伴随着对虚拟 DOM 的构建和对比，过程可以说相当耗时。而在 React 当中，很多时候我们会不经意间就频繁地调用了 render。为了避免不必要的 render 操作带来的性能开销，React 为我们提供了 shouldComponentUpdate 这个口子。")]),t._v(" "),a("p",[t._v("React 组件会根据 shouldComponentUpdate 的返回值，来决定是否执行该方法之后的生命周期，进而决定是否对组件进行 re-render（重渲染）。shouldComponentUpdate 的默认值为 true，也就是说“无条件 re-render”。在实际的开发中，我们往往通过手动往 shouldComponentUpdate 中填充判定逻辑，或者直接在项目中引入 PureComponent 等最佳实践，来实现“有条件的 re-render”。")]),t._v(" "),a("h2",{attrs:{id:"组件卸载阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件卸载阶段"}},[t._v("#")]),t._v(" 组件卸载阶段")]),t._v(" "),a("p",[t._v("组件卸载阶段的生命周期函数，就可简单了，只有一个"),a("code",[t._v("componentWillUnmount")]),t._v("。")]),t._v(" "),a("p",[t._v("这个生命周期本身不难理解，重点关注怎么触发它。组件销毁的常见原因有以下两个：")]),t._v(" "),a("ol",[a("li",[t._v("组件在父组件中被移除了；")]),t._v(" "),a("li",[t._v("组件中设置了 key 属性，父组件在 render 的过程中，发现 key 值和上一次不一致，那么这个组件就会被干掉。")])]),t._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("虚拟 DOM 和组件化是 React 的关键概念，简单地做了整理。")]),t._v(" "),a("p",[t._v("在 React15 版本中，梳理了常用的生命周期，进行了系统性的学习。")])])}),[],!1,null,null,null);n.default=e.exports}}]);