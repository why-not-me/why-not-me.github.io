(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{460:function(v,_,t){v.exports=t.p+"assets/img/page-ele.31cd7172.png"},516:function(v,_,t){"use strict";t.r(_);var a=t(10),e=Object(a.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("p",[v._v("通常，我们编写好 HTML、CSS、JavaScript 等文件，经过浏览器就会显示出漂亮的页面，但是它们是如何转化成页面的吗？这背后的原理，估计很多人并不知道。")]),v._v(" "),a("p",[v._v("这个转化涉及到到了浏览器一个很重要的模块，就是渲染模块。")]),v._v(" "),a("p",[v._v("而要了解渲染模块是怎么工作的，先来回顾一些网页三剑客。所谓网页三剑客，指的就是 HTML、CSS、JS。来看一张图：")]),v._v(" "),a("p",[a("img",{attrs:{src:t(460),alt:"网页元素"}})]),v._v(" "),a("p",[v._v("从上图可以看出，HTML 的内容是由标记和文本组成。标记也称为标签，每个标签都有它自己的语义，浏览器会根据标签的语义来正确展示 HTML 内容。比如上面的\n标签是告诉浏览器在这里的内容需要创建一个新段落，中间的文本就是段落中需要显示的内容。如果需要改变 HTML 的字体颜色、大小等信息，就需要用到 CSS。CSS 又称为层叠样式表，是由选择器和属性组成，比如图中的 p 选择器，它会把 HTML 里面")]),v._v(" "),a("p",[v._v("标签的内容选择出来，然后再把选择器的属性值应用到")]),v._v(" "),a("p",[v._v("标签内容上。选择器里面有个 color 属性，它的值是 red，这是告诉渲染引擎把")]),v._v(" "),a("p",[v._v("标签的内容显示为红色。至于 JavaScript（简称为 JS），使用它可以使网页的内容“动”起来，比如上图中，可以通过 JavaScript 来修改 CSS 样式值，从而达到修改文本颜色的目的。搞清楚 HTML、CSS 和 JavaScript 的含义后，那么接下来我们就正式开始分析渲染模块了。")]),v._v(" "),a("p",[v._v("由于渲染机制过于复杂，所以渲染模块在执行过程中会被划分为很多子阶段，输入的 HTML 经过这些子阶段，最后输出像素。我们把这样的一个处理流程叫做渲染流水线。")]),v._v(" "),a("p",[v._v("按照渲染的时间顺序，流水线可分为如下几个子阶段：")]),v._v(" "),a("ol",[a("li",[v._v("构建 DOM 树")]),v._v(" "),a("li",[v._v("样式计算")]),v._v(" "),a("li",[v._v("布局阶段")]),v._v(" "),a("li",[v._v("分层")]),v._v(" "),a("li",[v._v("绘制")]),v._v(" "),a("li",[v._v("分块")]),v._v(" "),a("li",[v._v("光栅化")]),v._v(" "),a("li",[v._v("合成")])]),v._v(" "),a("p",[v._v("每个阶段都会接收特定的输入内容，经过其处理过程，输出特定的产物。")]),v._v(" "),a("h2",{attrs:{id:"构建-dom-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建-dom-树"}},[v._v("#")]),v._v(" 构建 DOM 树")]),v._v(" "),a("p",[v._v("因为浏览器无法直接理解和使用 HTML，所以需要将 HTML 转换为浏览器能够理解的结构——DOM 树。")]),v._v(" "),a("p",[v._v("构建 DOM 树的输入内容是一个非常简单的 HTML 文件，然后经由 HTML 解析器解析，最终输出树状结构的 DOM。DOM 树 和 HTML 内容几乎是一样的，但是和 HTML 不同的是，DOM 树 是保存在内存中树状结构，可以通过 JavaScript 来查询或修改其内容。")]),v._v(" "),a("h2",{attrs:{id:"样式计算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#样式计算"}},[v._v("#")]),v._v(" 样式计算")]),v._v(" "),a("p",[v._v("样式计算的目的是为了计算出 DOM 节点中每个元素的具体样式，这个阶段大体可分为三步来完成：")]),v._v(" "),a("ol",[a("li",[v._v("把 CSS 转换为浏览器能够理解的结构。sCSS 的来源主要有三种：1、通过 link 引用的外部 CSS 文件；2、 "),a("code",[v._v("<style>")]),v._v("标签引用的内联 CSS；3、元素的"),a("code",[v._v("style")]),v._v("属性内嵌的 CSS。渲染引擎会把接收到 所有 CSS 文本，执行一个转换操作，将 CSS 文本转换为浏览器可以理解的结构--"),a("code",[v._v("styleSheets")]),v._v("。"),a("code",[v._v("styleSheets")]),v._v("这个数据，可查询可修改，为样式操作提供了基础。")]),v._v(" "),a("li",[v._v("转换样式表中的属性值，使其标准化。像"),a("code",[v._v("2em")]),v._v("、"),a("code",[v._v("blue")]),v._v("、"),a("code",[v._v("bold")]),v._v("，这些类型数值不容易被渲染引擎理解，所以需要将所有值转换为渲染引擎容易理解的、标准化的计算值，这个过程就是属性值标准化。")]),v._v(" "),a("li",[v._v("计算出 DOM 树中每个节点的具体样式，这就涉及到 CSS 的继承规则和层叠规则了。层叠是 CSS 的一个基本特征，它是一个定义了如何合并来自多个源的属性值的算法。它在 CSS 处于核心地位，CSS 的全称“层叠样式表”正是强调了这一点。")])]),v._v(" "),a("p",[v._v("总之，样式计算阶段的目的是为了计算出 DOM 节点中每个元素的具体样式，在计算过程中需要遵守 CSS 的继承和层叠两个规则。这个阶段最终输出的内容是每个 DOM 节点的样式，并被保存在 ComputedStyle 的结构内。")]),v._v(" "),a("h2",{attrs:{id:"布局阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布局阶段"}},[v._v("#")]),v._v(" 布局阶段")]),v._v(" "),a("p",[v._v("现在，我们有 DOM 树和 DOM 树中元素的样式，但这还不足以显示页面，因为我们还不知道 DOM 元素的几何位置信息。那么接下来就需要计算出 DOM 树中可见元素的几何位置，我们把这个计算过程叫做布局。")]),v._v(" "),a("p",[v._v("Chrome 在布局阶段需要完成两个任务：创建布局树和布局计算。")]),v._v(" "),a("ol",[a("li",[v._v("创建布局树，DOM 树中存在一些诸如"),a("code",[v._v("<head>")]),v._v("标签或"),a("code",[v._v("display: none;")]),v._v("属性的元素，所以需要额外构建一颗只包含可见元素的布局树，其实就是遍历 DOM 树中的所有可见节点，并把这些节点加到布局树中；")]),v._v(" "),a("li",[v._v("布局计算，现在我们有了一棵完整的布局树。那么接下来，就要计算布局树节点的坐标位置了。")])]),v._v(" "),a("h2",{attrs:{id:"分层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分层"}},[v._v("#")]),v._v(" 分层")]),v._v(" "),a("p",[v._v("现在我们有了布局树，而且每个元素的具体位置信息都计算出来了，那么接下来是不是就要开始着手绘制页面了？答案依然是否定的。")]),v._v(" "),a("p",[v._v("因为页面中有很多复杂的效果，如一些 3D 变换、页面滚动，或者使用"),a("code",[v._v("z-index")]),v._v("属性做 Z 轴排序。为了更加方便地实现这些效果，渲染引擎还需要为特定的节点生成专用的图层，并生成一棵对应的图层树（LayerTree）。如果你熟悉 PS，相信你会很容易理解图层的概念，正是这些图层叠加在一起构成了最终的页面图像。")]),v._v(" "),a("p",[v._v("渲染引擎给页面分了很多图层，这些图层按照一定顺序叠加在一起，就形成了最终的页面。")]),v._v(" "),a("p",[v._v("通常情况下，并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的层，那么这个节点就从属于父节点的图层。")]),v._v(" "),a("p",[v._v("那满足什么条件，渲染引擎就会为节点创造图层呢？一般来说，有自己图层的节点具备以下特点：")]),v._v(" "),a("ol",[a("li",[v._v("拥有层叠上下文属性的元素会有单独的图层：页面是个二维平面，但是层叠上下文能够让 HTML 元素具有三维概念，这些 HTML 元素按照自身属性的优先级分布在垂直于这个二维平面的 z 轴上。比如在 z 轴排序上,"),a("code",[v._v("position:fixed")]),v._v(" < "),a("code",[v._v("z-index: 2")]),v._v(" < "),a("code",[v._v("filter: blue(5px)")]),v._v(" < "),a("code",[v._v("opacity: 0.5")]),v._v("。")]),v._v(" "),a("li",[v._v("需要剪裁（clip）的地方也会被创建为图层，常见的就是文本溢出的地方。比如一个"),a("code",[v._v("div")]),v._v("元素是 200*200，放了很多文字，那么文字会溢出，就会产生裁剪，这个"),a("code",[v._v("div")]),v._v("就有了自己的图层。")])]),v._v(" "),a("p",[v._v("所以说，元素有了层叠上下文的属性或者需要被剪裁，满足其中任意一点，就会被提升成为单独一层。")]),v._v(" "),a("h2",{attrs:{id:"图层绘制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#图层绘制"}},[v._v("#")]),v._v(" 图层绘制")]),v._v(" "),a("p",[v._v("在完成图层树的构建之后，渲染引擎会对图层树中的每个图层进行绘制。")]),v._v(" "),a("p",[v._v("假如我们用一张纸，把纸的背景涂成蓝色，然后在中间位置画一个红色的圆，最后再在圆上画个绿色三角形，该怎么画呢？通常，我们会按下面的步骤进行：")]),v._v(" "),a("ol",[a("li",[v._v("绘制蓝色背景；")]),v._v(" "),a("li",[v._v("在中间绘制一个红色的圆；")]),v._v(" "),a("li",[v._v("再在圆上绘制绿色三角形。")])]),v._v(" "),a("p",[v._v("这分出来的步骤可以理解成一个“绘制指令”，组合“绘制指令”就能实现要的绘制效果。渲染引擎实现图层的绘制与之类似，会把一个图层的绘制拆分成很多小的绘制指令，然后再把这些指令按照顺序组成一个待绘制列表。绘制列表中的指令其实非常简单，就是让其执行一个简单的绘制操作，比如绘制粉色矩形或者黑色的线等。而绘制一个元素通常需要好几条绘制指令，因为每个元素的背景、前景、边框都需要单独的指令去绘制。所以在图层绘制阶段，输出的内容就是这些待绘制列表。")]),v._v(" "),a("h2",{attrs:{id:"删格化操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删格化操作"}},[v._v("#")]),v._v(" 删格化操作")]),v._v(" "),a("p",[v._v("绘制列表只是用来记录绘制顺序和绘制指令的列表，而实际上绘制操作是由渲染引擎中的合成线程来完成的。")]),v._v(" "),a("p",[v._v("图层的绘制列表准备好之后，主线程会把该绘制列表提交（commit）给"),a("strong",[v._v("合成线程")]),v._v("，"),a("strong",[v._v("合成线程")]),v._v("就开始工作了。")]),v._v(" "),a("p",[v._v("通常一个页面可能很大，但是用户只能看到其中的一部分，我们把用户可以看到的这个部分叫做视口（viewport）。")]),v._v(" "),a("p",[v._v("在有些情况下，有的图层可以很大，比如有的页面你使用滚动条要滚动好久才能滚动到底部，但是通过视口，用户只能看到页面的很小一部分，所以在这种情况下，要绘制出所有图层内容的话，就会产生太大的开销，而且也没有必要。")]),v._v(" "),a("p",[v._v("基于这个原因，合成线程会将图层划分为图块（tile），这些图块的大小通常是 256x256 或者 512x512。")]),v._v(" "),a("p",[v._v("然后合成线程会按照视口附近的图块来优先生成位图，实际生成位图的操作是由栅格化来执行的。所谓栅格化，是指将图块转换为位图。而图块是栅格化执行的最小单位。渲染进程维护了一个栅格化的线程池，所有的图块栅格化都是在线程池内执行的。")]),v._v(" "),a("p",[v._v("通常，栅格化过程都会使用 GPU 来加速生成，使用 GPU 生成位图的过程叫快速栅格化，或者 GPU 栅格化，生成的位图被保存在 GPU 内存中。")]),v._v(" "),a("p",[v._v("相信你还记得，GPU 操作是运行在 GPU 进程中，如果栅格化操作使用了 GPU，那么最终生成位图的操作是在 GPU 中完成的。")]),v._v(" "),a("p",[v._v("渲染进程把生成图块的指令发送给 GPU，然后在 GPU 中执行生成图块的位图，并保存在 GPU 的内存中。")]),v._v(" "),a("h2",{attrs:{id:"合成和显示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合成和显示"}},[v._v("#")]),v._v(" 合成和显示")]),v._v(" "),a("p",[v._v("一旦所有图块都被光栅化，合成线程就会生成一个绘制图块的命令——“DrawQuad”，然后将该命令提交给浏览器进程。")]),v._v(" "),a("p",[v._v("浏览器进程里面有一个叫 viz 的组件，用来接收合成线程发过来的 DrawQuad 命令，然后根据 DrawQuad 命令，将其页面内容绘制到内存中，最后再将内存显示在屏幕上。")]),v._v(" "),a("p",[v._v("到这里，经过这一系列的阶段，编写好的 HTML、CSS、JavaScript 等文件，经过浏览器就会显示出漂亮的页面了。")]),v._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[v._v("#")]),v._v(" 小结")]),v._v(" "),a("p",[v._v("所以，一个完整的渲染流程总结如下：")]),v._v(" "),a("ol",[a("li",[v._v("渲染进程将 HTML 内容转换为能够读懂的 DOM 树结构。")]),v._v(" "),a("li",[v._v("渲染引擎将 CSS 样式表转化为浏览器可以理解的 styleSheets，计算出 DOM 节点的样式。")]),v._v(" "),a("li",[v._v("创建布局树，并计算元素的布局信息。")]),v._v(" "),a("li",[v._v("对布局树进行分层，并生成分层树。")]),v._v(" "),a("li",[v._v("为每个图层生成绘制列表，并将其提交到合成线程。")]),v._v(" "),a("li",[v._v("合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。")]),v._v(" "),a("li",[v._v("合成线程发送绘制图块命令 DrawQuad 给浏览器进程。")]),v._v(" "),a("li",[v._v("浏览器进程根据 DrawQuad 消息生成页面，并显示到显示器上。")])])])}),[],!1,null,null,null);_.default=e.exports}}]);