(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{518:function(t,e,s){"use strict";s.r(e);var a=s(10),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("由于 Web 世界是开放的，任何资源都可以接入其中，我们的网站可以加载并执行别人网站的脚本文件、图片、音频 / 视频等资源，甚至可以下载其他站点的可执行文件，这些很符合 Web 理念。")]),t._v(" "),s("p",[t._v("但是如果 Web 世界是绝对自由的，那么页面行为将没有任何限制，这会造成无序或者混沌的局面，出现很多不可控的问题。")]),t._v(" "),s("p",[t._v("比如你在浏览器登陆一个银行站点后，又在浏览器新打开了一个站点，很不幸的是该站点是个恶意站点，如果页面和页面之间数据没有任何安全限制，那么该恶意站点就可以做如下的事情了：")]),t._v(" "),s("ul",[s("li",[t._v("恶意站点可以去修改银行站点的 DOM、CSSOM 等信息；")]),t._v(" "),s("li",[t._v("恶意站点劫持用户登录的用户名和密码；")]),t._v(" "),s("li",[t._v("恶意站点在银行站点插入自己的 js 脚本")]),t._v(" "),s("li",[t._v("读取银行站点的 Cookie、IndexDB 等数据")])]),t._v(" "),s("p",[t._v("所以说，在没有安全保障的 Web 世界中，我们是没有隐私的，因此需要安全策略来保障我们的隐私和数据的安全。")]),t._v(" "),s("p",[t._v("于是乎浏览器就有了同源策略，来提供数据安全保障。")]),t._v(" "),s("h2",{attrs:{id:"什么是同源策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是同源策略"}},[t._v("#")]),t._v(" 什么是同源策略")]),t._v(" "),s("p",[t._v("如果两个 URL 的协议、域名和端口都相同，我们就称这两个 URL 同源。比如下面这两个 URL，它们具有相同的协议 HTTPS、相同的域名 example.com，以及相同的端口 443，所以我们就说这两个 URL 是同源的。")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("http://example.com:8080/index\nhttp://example.com:8080/home\n")])])]),s("p",[t._v("浏览器默认两个相同的源之间是可以相互访问资源和操作 DOM 的。两个不同的源之间若想要相互访问资源或者操作 DOM，那么会有一套基础的安全策略的制约，我们把这称为同源策略。")]),t._v(" "),s("p",[t._v("同源策略的提供安全性表现在 DOM、web 数据和网络这三个层面。")]),t._v(" "),s("p",[t._v("第一个，DOM 层面。同源策略限制了来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作。比如我们在浏览器访问"),s("code",[t._v("http://example.com:8080/index")]),t._v("和"),s("code",[t._v("http://example.com:8080/home")]),t._v("，我们可以在 home 页面的脚本 js 中，写如下代码")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" Doc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" opener"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nDoc"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("display "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'none'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("我们就能在 home 页面，把 index 页面的元素全部隐藏了。")]),t._v(" "),s("p",[t._v("如果打开的第二个页面和第一个页面不是同源的，那么它们就无法相互操作 DOM 了。")]),t._v(" "),s("p",[t._v("第二个，数据层面。同源策略限制了不同源的站点读取当前站点的 Cookie、IndexDB、LocalStorage 等数据。")]),t._v(" "),s("p",[t._v("第三个，网络层面。同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点。所以浏览器才有跨域的问题要解决。")]),t._v(" "),s("h2",{attrs:{id:"csp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csp"}},[t._v("#")]),t._v(" CSP")]),t._v(" "),s("p",[t._v("Web 世界是开放的，可以接入任何资源，而同源策略要让一个页面的所有资源都来自于同一个源，也就是要将该页面的所有 HTML 文件、JavaScript 文件、CSS 文件、图片等资源都部署在同一台服务器上，这无疑违背了 Web 的初衷，也带来了诸多限制。比如将不同的资源部署到不同的 CDN 上时，CDN 上的资源就部署在另外一个域名上，因此我们就需要同源策略对页面的引用资源开一个“口子”，让其任意引用外部文件。所以像"),s("code",[t._v("<image>")]),t._v("、"),s("code",[t._v("<script>")]),t._v("标签 src 属性触发的网络 get 请求，就不会受同源策略限制，早期跨域就用 JSONP 这种方法来实现。还有表单也可以发跨域请求，只有"),s("code",[t._v("XMLHttpRequest")]),t._v("对象的跨站点网络请求，会受到同源策略限制。")]),t._v(" "),s("p",[t._v("不过开了这种口子，很容易收到 XSS 攻击。所谓 XSS 攻击，就是站点因为同源策略放开的口子，可能会被诸如恶意脚本，常见的就是 js 脚本。恶意脚本有时候可以读取 Cookie 数据，并将其作为参数添加至恶意站点尾部，当打开该恶意页面时，恶意服务器就能接收到当前用户的 Cookie 信息。")]),t._v(" "),s("p",[t._v("为了解决 XSS 攻击，浏览器中引入了内容安全策略，称为 CSP。CSP 的核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码。")]),t._v(" "),s("p",[t._v("CSP 的实质就是白名单制度，开发者明确告诉客户端，哪些外部资源可以加载和执行，等同于提供白名单。它的实现和执行全部由浏览器完成，开发者只需提供配置。")]),t._v(" "),s("p",[t._v("两种方法可以启用 CSP。")]),t._v(" "),s("p",[t._v("一种是通过 HTTP 头信息的 Content-Security-Policy 的字段，比如")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Content-Security-Policy: script-src "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'self'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" object-src "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'none'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" style-src cdn.example.org third-party.org"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" child-src https:\n")])])]),s("p",[t._v("以上这个 CSP HTTP Header 表示了这样的信息")]),t._v(" "),s("ul",[s("li",[t._v("js 脚本：只信任当前域名")]),t._v(" "),s("li",[s("object",[t._v("标签：不信任任何 URL，即不加载任何资源")])]),t._v(" "),s("li",[t._v("css 样式表：只信任 cdn.example.org 和 third-party.org")]),t._v(" "),s("li",[t._v("框架（frame）：必须使用 HTTPS 协议加载")]),t._v(" "),s("li",[t._v("其他资源： 没有限制")])]),t._v(" "),s("p",[t._v("另一种是通过网页的"),s("code",[t._v("<meta>")]),t._v("标，比如"),s("code",[t._v("<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self'; object-src 'none'; style-src cdn.example.org third-party.org; child-src https:\">")])]),t._v(" "),s("h2",{attrs:{id:"cors"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[t._v("#")]),t._v(" CORS")]),t._v(" "),s("p",[t._v("为了解决跨站点资源共享，引入了跨域资源共享（CORS），使用该机制可以进行跨域访问控制，从而使跨域数据传输得以安全进行。")]),t._v(" "),s("p",[t._v("整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。")]),t._v(" "),s("p",[t._v("因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。")]),t._v(" "),s("p",[t._v("浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。")]),t._v(" "),s("p",[t._v("简单请求主要满足以下条件：")]),t._v(" "),s("ol",[s("li",[t._v("请求方式是"),s("code",[t._v("HEAD")]),t._v("、"),s("code",[t._v("GET")]),t._v("、"),s("code",[t._v("POST")]),t._v("三种方法之一")]),t._v(" "),s("li",[t._v("HTTP 的头信息不超出以下几种字段：Accept，Accept-Language，Content-Language，Last-Event-ID，Content-Type：只限于三个值 application/x-www-form-urlencoded、multipart/form-data、text/plain")])]),t._v(" "),s("p",[t._v("非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 PUT 或 DELETE，或者 Content-Type 字段的类型是 application/json。")]),t._v(" "),s("p",[t._v('非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为"预检"请求（preflight）。')]),t._v(" "),s("p",[t._v("看一次简单的 CORS 的 GET 请求:")]),t._v(" "),s("p",[t._v("浏览器发起请求时，HTTP 请求头又"),s("code",[t._v("Origin")]),t._v("，告诉服务器这次请求来自哪个源（协议+域名+端口）。服务器根据这个值，判断这个源是否在白名单内。如果"),s("code",[t._v("Origin")]),t._v("指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含"),s("code",[t._v("Access-Control-Allow-Origin")]),t._v("字段，就知道出错了，从而抛出一个错误，被 XMLHttpRequest 的 onerror 回调函数捕获。注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200。")]),t._v(" "),s("p",[t._v("如果 Origin 指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段，如下：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Access-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Credentials: "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\nAccess-Control-Expose-Headers: FooBar\nContent-Type: text/html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("charset")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf-8\n")])])]),s("p",[t._v("非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 PUT 或 DELETE，或者 Content-Type 字段的类型是 application/json。")]),t._v(" "),s("p",[t._v('非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为"预检"请求（preflight）。')]),t._v(" "),s("p",[t._v("浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。只有得到肯定答复，浏览器才会发出正式的 XMLHttpRequest 请求，否则就报错。")]),t._v(" "),s("p",[t._v("预检请求的请求头一般是这样的：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("OPTIONS /cors HTTP/1.1\nOrigin: http://api.bob.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n")])])]),s("p",[t._v('服务器收到"预检"请求以后，检查了 Origin、Access-Control-Request-Method 和 Access-Control-Request-Headers 字段以后，确认允许跨源请求，就可以做出回应。比如这样')]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("HTTP/1.1 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" OK\nDate: Mon, 01 Dec "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2008")]),t._v(" 01:15:39 GMT\nServer: Apache/2.0.61 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Unix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nContent-Type: text/html"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("charset")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf-8\nContent-Encoding: "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("gzip")]),t._v("\nContent-Length: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nKeep-Alive: "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("timeout")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(", "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("max")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\nConnection: Keep-Alive\nContent-Type: text/plain\n")])])]),s("p",[t._v('如果服务器否定了"预检"请求，会返回一个正常的 HTTP 回应，但是没有任何 CORS 相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被 XMLHttpRequest 对象的 onerror 回调函数捕获。控制台会打印出'),s("code",[t._v("Origin http://api.bob.com is not allowed by Access-Control-Allow-Origin.")]),t._v("类似的字符串。")]),t._v(" "),s("p",[t._v('一旦服务器通过了"预检"请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样，会有一个 Origin 头信息字段。服务器的回应，也都会有一个 Access-Control-Allow-Origin 头信息字段。')]),t._v(" "),s("p",[t._v("CORS 与 JSONP 的使用目的相同，但是比 JSONP 更强大。")]),t._v(" "),s("p",[t._v("JSONP 只支持 GET 请求，CORS 支持所有类型的 HTTP 请求。JSONP 的优势在于支持老式浏览器，以及可以向不支持 CORS 的网站请求数据。")]),t._v(" "),s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("同源策略是为了 web 安全，不过带来了不便之处。")]),t._v(" "),s("p",[t._v("为了优化，针对 XSS 攻击引入了 CSP 机制；为了跨域资源共享，引入了 CORS 机制。")])])}),[],!1,null,null,null);e.default=n.exports}}]);